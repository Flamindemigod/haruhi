// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}



model Users{
        id BigInt @id @unique
        userName String
        created_at DateTime @default(now())
        lastUpdatedAt   DateTime @default(now())
        sessionId   String  @default(uuid())
        @@map(name: "users")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ScoreFormat{
    POINT_10_DECIMAL
    POINT_100
    POINT_10
    POINT_5
    POINT_3
}


model User {
    id            String    @id @default(cuid())
    aniid         Int    @unique
    name          String?
    image         String?
    scoreFormat   ScoreFormat  @default(POINT_10_DECIMAL)
    showNSFW      Boolean   @default(false)
    email         String?
    emailVerified Boolean? 
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}


